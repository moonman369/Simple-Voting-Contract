{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string[]",
						"name": "proposalNames",
						"type": "string[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "DelegationSuccessful",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_proposal",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_votesAdded",
						"type": "uint256"
					}
				],
				"name": "VoteCasted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_chairPerson",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_proposalCount",
						"type": "uint256"
					}
				],
				"name": "VotingStarted",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "chairPerson",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "computeWinningProposals",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "delegate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_proposalIndex",
						"type": "uint256"
					}
				],
				"name": "getProposal",
				"outputs": [
					{
						"internalType": "string",
						"name": "proposalName_",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "voteCount_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinningProposals",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_voter",
						"type": "address"
					}
				],
				"name": "giveRightToVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposalCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposal",
						"type": "uint256"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "voters",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "delegate",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "vote",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "winnerNames",
				"outputs": [
					{
						"internalType": "string",
						"name": "winnerNames_",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements voting process along with vote delegation",
			"kind": "dev",
			"methods": {
				"computeWinningProposals()": {
					"details": "Computes the winning proposal taking all previous votes into account."
				},
				"constructor": {
					"details": "Create a new ballot to choose one of 'proposalNames'.",
					"params": {
						"proposalNames": "names of proposals"
					}
				},
				"delegate(address)": {
					"details": "Delegate your vote to the voter 'to'.",
					"params": {
						"_to": "address to which vote is delegated"
					}
				},
				"giveRightToVote(address)": {
					"details": "Give 'voter' the right to vote on this ballot. May only be called by 'chairPerson'.",
					"params": {
						"_voter": "address of voter"
					}
				},
				"vote(uint256)": {
					"details": "Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.",
					"params": {
						"proposal": "index of proposal in the proposals array"
					}
				},
				"winnerNames()": {
					"details": "Calls winningProposal() function to get the index of the winner contained in the proposals array and then",
					"returns": {
						"winnerNames_": "the name of the winner"
					}
				}
			},
			"title": "Ballot",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SimpleVoting.sol": "SimpleVoting"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/SimpleVoting.sol": {
			"keccak256": "0xcf3ee6df00058e16e0627269e96b835dbbe2c8db069b2b69171adacc5b648b8b",
			"license": "MIT",
			"urls": [
				"bzz-raw://501d97aeb0524cd340f5c59c83621f39cb5991b3c129e86d7447cca94a98d533",
				"dweb:/ipfs/QmUG7FQwKhexdv5E2NadxmeCUkVQ8ZWSdnyo1twXke6BVw"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		}
	},
	"version": 1
}